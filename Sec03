Sec03 - 회원 관리 예제 백엔드 개발
간단한 비지니스 로직에 대해서 구현해보자

<Hypo>
데이터 : 회원ID, 이름
기능 : 회원 등록, 조회
데이터 저장소는 선정되지 않았다

<구현>
일반적인 웹 애플리케이션 구조를 따라서 컨트롤러, 서비스, 리포지토리, 도메인을 생각한다

먼저, 데이터 저장소를 memory 기반의 간단한 저장소로 가정하고 시작한다.
이때 리포지토리를 인터페이스로 구현하고, 후에 데이터 저장소를 구현 클래스로 하여금 변경 할 수 있도록 설계한다.
(구현체(인터페이스를 구현한 객체)의 변경이 쉽다는 인터페이스의 특성을 잘 이용한 케이스)

회원 : Member
리포지토리 : MemberRepository
데이터베이스 : MemoryMemberRepository

자세한 메소드와 Map, List, 람다 등 사용된 자바 클래스는 코드내의 주석에 적어놓음

<테스트>
테스트 케이스는 Junit이라는 프레임워크로 여러 테스트를 효율적으로 실행한다
@Test 어노테이션으로 각각의 기능이 잘 수행되는지 확인하는데, 이때 중요한건
@AfterEach로 각각의 메소드가 실행된 후에 데이터를 Clear 시켜주어야 한다는 것이다.
왜냐하면, 각각의 테스트들은 순서에 의존적이지않고 독립적으로 수행되기때문에 데이터가 겹치거나 남아있을 수
있기때문에 각 테스트가 실행된 후에는 메모리 DB에 남아있는 데이터를 Clear 시켜주는 afterEach 메소드가 필수적이다.


